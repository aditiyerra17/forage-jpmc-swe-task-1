From df9ae63c63bc5a2f9eedd2b2da109314f144b814 Mon Sep 17 00:00:00 2001
From: Aditi <aditiyerra25@gmail.com>
Date: Sat, 27 Apr 2024 20:55:21 +0530
Subject: [PATCH] added unit test

---
 client3.py     | 13 +++++++++----
 client_test.py | 46 +++++++++++++++++++++++++++++++++++++++++++---
 2 files changed, 52 insertions(+), 7 deletions(-)

diff --git a/client3.py b/client3.py
index 3fc09b7..04f20ef 100644
--- a/client3.py
+++ b/client3.py
@@ -32,17 +32,19 @@ N = 500
 def getDataPoint(quote):
     """ Produce all the needed values to generate a datapoint """
     """ ------------- Update this function ------------- """
-    stock = quote['stock']
+    sstock = quote['stock']
     bid_price = float(quote['top_bid']['price'])
     ask_price = float(quote['top_ask']['price'])
-    price = bid_price
+    price = (bid_price + ask_price) / 2  # Compute the average of bid and ask price
     return stock, bid_price, ask_price, price
 
 
 def getRatio(price_a, price_b):
     """ Get ratio of price_a and price_b """
     """ ------------- Update this function ------------- """
-    return 1
+    if price_b == 0:
+        return None
+    return price_a / price_b
 
 
 # Main
@@ -52,8 +54,11 @@ if __name__ == "__main__":
         quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
 
         """ ----------- Update to get the ratio --------------- """
+        prices = {}
         for quote in quotes:
             stock, bid_price, ask_price, price = getDataPoint(quote)
+            prices[stock] = price
             print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
 
-        print("Ratio %s" % getRatio(price, price))
+        ratio_ABC_DEF = getRatio(prices.get('ABC',0), prices.get('DEF', 0))
+        print(f"Ratio ABC/DEF: {ratio_ABC_DEF}")
diff --git a/client_test.py b/client_test.py
index af2bf26..6557520 100644
--- a/client_test.py
+++ b/client_test.py
@@ -1,5 +1,5 @@
 import unittest
-from client3 import getDataPoint
+from client3 import getDataPoint, getRatio
 
 class ClientTest(unittest.TestCase):
   def test_getDataPoint_calculatePrice(self):
@@ -8,6 +8,19 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+        stock, top_bid_price, top_ask_price, calculated_price = getDataPoint(quote)
+        self.assertEqual(stock, quote['stock'])
+        self.assertEqual(top_bid_price, quote['top_bid']['price'])
+        self.assertEqual(top_ask_price, quote['top_ask']['price'])
+        self.assertEqual(calculated_price, (quote['top_bid']['price'] + quote['top_ask']['price']) / 2)
+    # Test for ABC stock
+    data_point_ABC = getDataPoint(quotes[0])
+    self.assertEqual(data_point_ABC, ('ABC', 120.48, 121.2, 120.84))
+
+    # Test for DEF stock
+    data_point_DEF = getDataPoint(quotes[1])
+    self.assertEqual(data_point_DEF, ('DEF', 117.87, 121.68, 119.775))
 
   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
     quotes = [
@@ -15,11 +28,38 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
-
-
+    for quote in quotes:
+      stock, top_bid_price, top_ask_price, calculated_price = getDataPoint(quote)
+      self.assertEqual(stock, quote['stock'])
+      self.assertEqual(top_bid_price, quote['top_bid']['price'])
+      self.assertEqual(top_ask_price, quote['top_ask']['price'])
+      self.assertEqual(calculated_price, (quote['top_bid']['price'] + quote['top_ask']['price']) / 2)
   """ ------------ Add more unit tests ------------ """
+  def test_getRatio(self):
+        # Test for ratio when price_b is not zero
+        price_a = 100
+        price_b = 50
+        self.assertEqual(getRatio(price_a, price_b), 2.0)
+
+        # Test for ratio when price_b is zero
+        price_a = 100
+        price_b = 0
+        self.assertEqual(getRatio(price_a, price_b), None)  # Assert that it returns None
+        
+        # Test for ratio when price_a is zero
+        price_a = 0
+        price_b = 50
+        self.assertEqual(getRatio(price_a, price_b), 0.0)
 
+        # Test for ratio when price_a is negative
+        price_a = -100
+        price_b = 50
+        self.assertEqual(getRatio(price_a, price_b), -2.0)
 
+        # Test for ratio when both prices are negative
+        price_a = -100
+        price_b = -50
+        self.assertEqual(getRatio(price_a, price_b), 2.0)
 
 if __name__ == '__main__':
     unittest.main()
-- 
2.41.0.windows.3

